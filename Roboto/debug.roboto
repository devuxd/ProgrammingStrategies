# This debugging strategy that helps you work backwards from faulty program output to its cause.
# The overall approach is find the code that caused the faulty output, then recursively find the code that code to run.
# You inspect each line of code for defects.
STRATEGY debug()
	# The first step in this strategy is to familiarize yourself with the program. If you haven't seen this code before, this knowledge will help you execute future steps in this strategy.
	Familiarize yourself with the program by reading the names of all of the variables and functions in the code
	# The next step in this strategy is finding the code that caused the faulty output. If it was graphical output, look for lines of code that rendered graphics. If it was textual output, look for lines of code that rendered to the console. You can find these lines by searching for keywords from API calls that render output, such as "draw", "print", or "log".
	Find lines of code that may have rendered the faulty output
	# Record the lines you found so you can refer to them later.
	SET 'outputLines' to a list of line numbers that could have produced the incorrect output
	# Now that you have some lines that could have produced the output, you're going to check each
	# line, see if it executed, and then find the origin of the wrong value. If you're lucky, you only have one
	# output line to check.
	FOR EACH 'line' IN 'outputLines'
		# The first step is see if this output line executed. Insert a logging statement before the line to check.
		# run the program to this line.
		Insert a log statement before 'line' to check if the output executed
		# Reproduce the failure again and check of the log statement printed to the console
		Reproduce the failure and check the console for the string you printed
		# This cleanup will ensure the logging statement doesn't affect the program later
		Remove the log statement you inserted
		# If the line executed, we'll check to see if something was wrong with it
		IF the program executed 'line'
			# Based on your understanding of the program's requirements, does the line do what it is supposed to do? If not, you may have found the defect!
			IF 'line' is defective
				RETURN 'line'
			# Inspect the values used to execute the line. Are any of the values wrong?
			IF 'line' executed with an incorrect value
				# Make note of this so we can use it later
				SET 'wrongValue' TO the incorrect value
				# We'll use substrategy to figure out where this wrong value came from.
				RETURN localizeWrongValue('wrongValue')
	# If you made it to this line, that means you either didn't find any lines that produced faulty output. Is it possible you made a mistake above? If so, check your work and start over, because something caused the faulty output.
	RETURN nothing

STRATEGY localizeWrongValue(wrongValue)
	# The goal of this strategy is to recursively search backwards for the cause of the wrong value.
	# We begin by finding all of the lines of code that could have produced the wrong value.
	# For example, if it's a valuable stored in a variable, find all of the assignments to that variable
	# that could have defined the variables current value. If it was a function's return value,
	# find the return statements that could have produced the wrong value.
	# These lines include expressions that computed the wrong value, a value passed in through a parameter, or a function call that returned a value. Inspect the code to find the source of the incorrect value.
	SET 'lines' to all of the lines of the the program that could have produced 'wrongValue'
	# We'll check each line for errors, or for faulty values.
	FOR EACH 'line' in 'lines'
		# The first step is see if this output line executed. Insert a logging statement before the line to check.
		# run the program to this line.
		Insert a log statement before 'line' to check if the output executed
		# Reproduce the failure again and check of the log statement printed to the console.
		Reproduce the failure and check the console for the string you printed
		# This cleanup will ensure the logging statement doesn't affect the program later.
		Remove the log statement you inserted
		IF 'line' executed
			# Does the line do what it is supposed to do? If not, you may have found the defect!
			IF 'line' is defective
				RETURN 'line'
			# If the line itself wasn't defective, maybe one of the values it used to execute was defective.
			SET 'badValue' TO any incorrect value used by the line to execute
			IF 'value' isn't nothing
				DO localizeWrongValue('badValue')
	# If you made it to this line, then you didn't find the cause of the wrong value. Is it possible you made a mistake above? If so, check your work and start over.
	RETURN nothing
